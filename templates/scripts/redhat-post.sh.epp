#!/bin/bash

# set -x -v

#------------------------------------------------------------------------#
#                                                                        #
# Script:    redhat-post.sh                                              #
# Date:      30.12.2020                                                  #
# Version:   0.1                                                         #
# Author:    Thomas Krieger <tom@tom-krieger.de>                         #
#                                                                        #
# History:                                                               #
# --------                                                               #
#                                                                        #
# -----------+-------------------+-------------------------------------- #
# Date       ! Who               ! Reason                                #
# -----------+-------------------+-------------------------------------- #
# 30.12.2020 ! Thomas Krieger    ! initial version                       #
# -----------+-------------------+-------------------------------------- #
#                                                                        #
#------------------------------------------------------------------------#

PEMASTER="<%= $puppetmaster %>"
PEMASTERIP="<%= $puppetmasterip %>"
INSTALLSERVERIP="<%= $reposerverip %>"
INSTALLSERVER="<%= $reposerver %>"
LOGGER="undef"
INSTALLPUPPET=${1:-y}
FOREMAN=${2:-n}

if [ "${FOREMAN}" = "n" ]
then
  PEMASTER="pemaster.home.tom-krieger.de"
else
  PEMASTER="foreman.home.tom-krieger.de"
fi

if [ -x "/usr/bin/logger" ] ; then
	LOGGER="/usr/bin/logger"
elif [ -x "/bin/logger" ] ; then
	LOGGER="/bin/logger"
fi

#------------------------------------------------------------------------#
# send a log message to syslog
#------------------------------------------------------------------------#

function log () {

	if [ ! -z "$1" ] ; then

		if [ "$LOGGER" != "undef" ] ; then
			$LOGGER -p daemon.info -t postinstall "$1"
		fi

	fi
}

#------------------------------------------------------------------------#
# get a file from the install server
#------------------------------------------------------------------------#

function getFile () {
	
	if [ "$#" != "2" ] ; then
		echo "wrong argument count for getFile"
		log "wrong argument count for getFile"
		ret=2
	else
		url=$1
		outfile=`basename $2`
		if [ -x "/bin/curl" ] ; then
			curl -f -s -k -o $outfile $url
			ret=$?
		elif [ -x "/usr/bin/wget" ] ; then
			wget -q -O $outfile $url
			ret=$?
		else
			echo "neither wget nor curl found!"
			log "neither wget nor curl found!"
			ret=2
		fi
	fi

	log "getFile for $url to $outfile finished with $ret"

	return $ret
}

#------------------------------------------------------------------------#
# print out a success or failure message at column 65
#------------------------------------------------------------------------#

function printReturn () {
	ret=$1
	pos=$2
	tput cup $pos 65 >/dev/tty1
	if [ "$ret" = "0" ] ; then
		echo "[ success ]" >/dev/tty1
	else
		echo "[ failure ]" >/dev/tty1
	fi
}

#------------------------------------------------------------------------#
# clean up rpm db files
#------------------------------------------------------------------------#

function cleanupRpmDbFiles() {
	[ -f /var/lib/rpm/__db.001 ] && /bin/rm /var/lib/rpm/__db.001
	[ -f /var/lib/rpm/__db.002 ] && /bin/rm /var/lib/rpm/__db.002
	[ -f /var/lib/rpm/__db.003 ] && /bin/rm /var/lib/rpm/__db.003

	if [ $release -lt 8 ] ; then		
		/usr/bin/yum clean all
	else
		/usr/bin/dnf clean all && rm -rf /var/cache/dnf  && /usr/bin/dnf upgrade -y && /usr/bin/dnf update -y
		/usr/bin/yum clean all
	fi
}

#------------------------------------------------------------------------#
# create csr_attributes file
#------------------------------------------------------------------------#

function createCrsAttributes () {
	log "creatimg csr attributes"

	if [ -f /tmp/puppetrole ]
	then
		PUPPETROLE=`cat /tmp/puppetrole`
	fi

	if [ -f /tmp/puppetenv ]
	then
		PUPPETENV=`cat /tmp/puppetenv`
	fi

	if [ -f /tmp/datacenter ]
	then
		DATACENTER=`cat /tmp/datacenter`
	fi

	if [ ! -d /etc/puppetlabs/puppet ]
	then
		echo "creating directory /etc/puppetlabs/puppet"
		mkdir -p /etc/puppetlabs/puppet
	fi

	log "puppet environment ${PUPPETENV}, role ${PUPPETROLE}"

	cat > /etc/puppetlabs/puppet/csr_attributes.yaml << YAML
custom_attributes:
    1.2.840.113549.1.9.7: <%= unwrap($challenge_password) %>
extension_requests:
    pp_image_name:  Ubuntu-${release}
    pp_hostname: `hostname`
    pp_datacenter: ${DATACENTER}
    pp_role: ${PUPPETROLE}
    pp_auth_role: ${PUPPETROLE}
    pp_environment: ${PUPPETENV}
YAML

}

#------------------------------------------------------------------------#
# run puppet agent
#------------------------------------------------------------------------#

function runPuppetAgent () {
	sleep 2

	systemctl enable puppet

	while [ -f "/opt/puppetlabs/puppet/cache/state/agent_catalog_run.lock" ]
	do
			echo "puppet run currently on the way ..."
			log "puppet run currently on the way ..."
			sleep 20
	done

	/usr/local/bin/puppet agent -t
}

#------------------------------------------------------------------------#
# install openvox puppet
#------------------------------------------------------------------------#

function installOpenvoxPuppet () {
	log "installing OpenVox puppet"

	if [ -f /tmp/puppetenv ]
	then
		PUPPETENV=`cat /tmp/puppetenv`
	fi

	createCrsAttributes

	osname=$(cat /etc/os-release | grep ^ID= | cut -f 2 -d = | sed -e 's/"//g' | tr '[:upper:]' '[:lower:]')
	release=$(cat /etc/os-release | grep VERSION_ID | cut -f 2 -d = | sed -e 's/"//g')

	if [ "${osname}" = "rhel" ]
	then
		myosname="el"
	else
		myosname=$osname
	fi
	myrelease=$(echo $release | cut -f 1 -d '.')

	echo "Downloading Openvox Release package for Redhat like OSes"
	curl -o /tmp/openvox${version}-release-${myosname}-${myrelease}.noarch.rpm https://yum.voxpupuli.org/openvox${version}-release-${myosname}-${myrelease}.noarch.rpm
	echo "Installing Openvox agent"
	yum localinstall -y /tmp/openvox${version}-release-${myosname}-${myrelease}.noarch.rpm
	rm -f /tmp/openvox${version}-release-${myosname}-${myrelease}.noarch.rpm
	yum -y install openvox-agent
	if [ ! -f /usr/local/bin/puppet ]
	then
		ln -s /opt/puppetlabs/puppet/bin/puppet /usr/local/bin/puppet
	fi
	/usr/local/bin/puppet config set environment ${PUPPETENV} --section agent
	/usr/local/bin/puppet config set --section main server ${PEMASTER}

	runPuppetAgent

}

#------------------------------------------------------------------------#
# install PE puppet
#------------------------------------------------------------------------#

function installPePuppet () {
	log "installing PE puppet"

	curl -o /usr/local/share/ca-certificates/pe-master.crt https://repos.home.tom-krieger.de/pub/pe-master-puppet.crt
	update-ca-certificates
	apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4528B6CD9E61EF26

	createCrsAttributes

	curl -k https://${PEMASTER}:8140/packages/current/install.bash | sudo bash
	/usr/local/bin/puppet config set environment ${PUPPETENV} --section agent

	runPuppetAgent

}

#------------------------------------------------------------------------#
# print a starting message
#------------------------------------------------------------------------#

tput clear >/dev/tty1
tput cup 3 0 >/dev/tty1
curpos=3
echo "* starting postinstall bootstrap script" >/dev/tty1

curpos=`expr $curpos + 1`
tput cup $curpos 0 >/dev/tty1
osname=`cat /etc/redhat-release | cut -d ' ' -f 1`
oshelp=`cat /etc/redhat-release | cut -d ' ' -f 2` 
if [ "$osname" = "CentOS" ] ; then
	if [ "$oshelp" = "Linux" ] ; then
		release=`cat /etc/redhat-release | cut -d ' ' -f 4`
	else
		release=`cat /etc/redhat-release | cut -d ' ' -f 3`
	fi
	ostype="CentOS"
elif [ "$osname" == "AlmaLinux" ] ; then
	if [ "$oshelp" = "Linux" ] ; then
		release=`cat /etc/redhat-release | cut -d ' ' -f 4`
	else
		release=`cat /etc/redhat-release | cut -d ' ' -f 3`
	fi
	ostype="AlmaLinux"
else
	release=`cat /etc/redhat-release | cut -d ' ' -f 6`
  ostype="Redhat"
fi

log "Using install puppet = ${INSTALLPUPPET} and foreman = ${FOREMAN}"

release=${release:0:1}
echo "* $ostype release is $release" >/dev/tty1
echo "$ostype release is $release"
echo "Using install puppet = ${INSTALLPUPPET} and foreman = ${FOREMAN}"
hostname
hostname >/dev/tty1

curpos=`expr $curpos + 1`
tput cup $curpos 0 >/dev/tty1
echo "* using logger $LOGGER" >/dev/tty1

if [ "$release" = "8" ] ; then
	/usr/bin/update-crypto-policies --set DEFAULT
fi

<%- if $add_hosts_entries { -%>
echo "${PEMASTERIP}    ${PEMASTER}" >> /etc/hosts
echo "${INSTALLSERVERIP}"    ${INSTALLSERVER}" >> /etc/hosts"
<%- } -%>

#------------------------------------------------------------------------#
# clean up rpm db files
#------------------------------------------------------------------------#

cleanupRpmDbFiles

#------------------------------------------------------------------------#
# update all installed packages to their latest version
#------------------------------------------------------------------------#

echo "+----------------------------------------------------+"
echo "+ updating to actual distri level with yum           +"
echo "+----------------------------------------------------+"
curpos=`expr $curpos + 1`
tput cup $curpos 0 >/dev/tty1
echo -n "* getting and installing all updates ... " >/dev/tty1
echo "getting and installing all updates" >/dev/tty3

ret=0
/usr/bin/yum check-update 
/usr/bin/yum -y update yum
if [ "$?" = "0" ] ; then
	/usr/bin/yum -y update
	if [ "$?" != "0" ] ; then
		echo "yum -y update failed"
		ret=1
	fi
else
	echo "yum -y update yum failed"
	ret=1
fi

if [ "$ret" != "0" ] ; then
	log "error installing updates"
else
	log "updates installed successfully"
fi

printReturn $ret $curpos

#------------------------------------------------------------------------#
# clean up
#------------------------------------------------------------------------#

echo "+---------------------------------------------------+"
echo "+ cleaning up                                       +"
echo "+---------------------------------------------------+"

cleanupRpmDbFiles

#------------------------------------------------------------------------#
# system hardening
#------------------------------------------------------------------------#

echo "+----------------------------------------------------+"
echo "+ enabling sysrq                                     +"
echo "+----------------------------------------------------+"
curpos=`expr $curpos + 1`
tput cup $curpos 0 >/dev/tty1
echo -n "* enabling sysrq ... " >/dev/tty1
echo "enabling sysrq" >/dev/tty3

ret=0
sed -i 's/kernel.sysrq = 0/kernel.sysrq = 1/' /etc/sysctl.conf
if [ "$?" != "0" ] ; then
	echo "can't set sysrq=1"
	ret=1
fi

printReturn $ret $curpos

#------------------------------------------------------------------------#
# install puppet
#------------------------------------------------------------------------#

if [ "${INSTALLPUPPET}" = "y" ]
then

	if [ "${FOREMAN}" = "n" ]
	then
		installPePuppet
	else
		installOpenvoxPuppet
	fi
	
fi

#------------------------------------------------------------------------#
# here we are, end of a hard work ;-)
#------------------------------------------------------------------------#

if [ $release -lt 8 ] ; then		
	/usr/bin/yum clean all
else
	/usr/bin/dnf clean all && rm -rf /var/cache/dnf  && /usr/bin/dnf upgrade -y && /usr/bin/dnf update -y
	/usr/bin/yum clean all
fi

curpos=`expr $curpos + 1`
tput cup $curpos 0 >/dev/tty1
echo "* finished postinstall bootstrap script" >/dev/tty1

exit 0

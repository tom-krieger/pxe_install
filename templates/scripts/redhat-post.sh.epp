#!/bin/bash

# set -x -v

#------------------------------------------------------------------------#
#                                                                        #
# Script:    redhat-post.sh                                              #
# Date:      30.12.2020                                                  #
# Version:   0.1                                                         #
# Author:    Thomas Krieger <tom@tom-krieger.de>                         #
#                                                                        #
# History:                                                               #
# --------                                                               #
#                                                                        #
# -----------+-------------------+-------------------------------------- #
# Date       ! Who               ! Reason                                #
# -----------+-------------------+-------------------------------------- #
# 30.12.2020 ! Thomas Krieger    ! initial version                       #
# -----------+-------------------+-------------------------------------- #
#                                                                        #
#------------------------------------------------------------------------#

PEMASTER="<%= $puppetmaster %>"
PEMASTERIP="<%= $puppetmasterip %>"
INSTALLSERVERIP="<%= $reposerverip %>"
INSTALLSERVER="<%= $reposerver %>"
LOGGER="undef"

if [ "$#" = "1" ] ; then
	install_puppet=$1
else
	install_puppet="y"
fi

if [ -x "/usr/bin/logger" ] ; then
	LOGGER="/usr/bin/logger"
elif [ -x "/bin/logger" ] ; then
	LOGGER="/bin/logger"
fi

#------------------------------------------------------------------------#
# send a log message to syslog
#------------------------------------------------------------------------#

function log () {

	if [ ! -z "$1" ] ; then

		if [ "$LOGGER" != "undef" ] ; then
			$LOGGER -p daemon.info -t postinstall "$1"
		fi

	fi
}

#------------------------------------------------------------------------#
# get a file from the install server
#------------------------------------------------------------------------#

function getFile () {
	
	if [ "$#" != "2" ] ; then
		echo "wrong argument count for getFile"
		log "wrong argument count for getFile"
		ret=2
	else
		url=$1
		outfile=`basename $2`
		if [ -x "/bin/curl" ] ; then
			curl -f -s -k -o $outfile $url
			ret=$?
		elif [ -x "/usr/bin/wget" ] ; then
			wget -q -O $outfile $url
			ret=$?
		else
			echo "neither wget nor curl found!"
			log "neither wget nor curl found!"
			ret=2
		fi
	fi

	log "getFile for $url to $outfile finished with $ret"

	return $ret
}

#------------------------------------------------------------------------#
# print out a success or failure message at column 65
#------------------------------------------------------------------------#

function printReturn () {
	ret=$1
	pos=$2
	tput cup $pos 65 >/dev/tty1
	if [ "$ret" = "0" ] ; then
		echo "[ success ]" >/dev/tty1
	else
		echo "[ failure ]" >/dev/tty1
	fi
}

#------------------------------------------------------------------------#
# clean up rpm db files
#------------------------------------------------------------------------#

function cleanupRpmDbFiles() {
	[ -f /var/lib/rpm/__db.001 ] && /bin/rm /var/lib/rpm/__db.001
	[ -f /var/lib/rpm/__db.002 ] && /bin/rm /var/lib/rpm/__db.002
	[ -f /var/lib/rpm/__db.003 ] && /bin/rm /var/lib/rpm/__db.003

	if [ $release -lt 8 ] ; then		
		/usr/bin/yum clean all
	else
		/usr/bin/dnf clean all && rm -rf /var/cache/dnf  && /usr/bin/dnf upgrade -y && /usr/bin/dnf update -y
		/usr/bin/yum clean all
	fi
}

#------------------------------------------------------------------------#
# print a starting message
#------------------------------------------------------------------------#

tput clear >/dev/tty1
tput cup 3 0 >/dev/tty1
curpos=3
echo "* starting postinstall bootstrap script" >/dev/tty1

curpos=`expr $curpos + 1`
tput cup $curpos 0 >/dev/tty1
osname=`cat /etc/redhat-release | cut -d ' ' -f 1`
oshelp=`cat /etc/redhat-release | cut -d ' ' -f 2` 
if [ "$osname" = "CentOS" ] ; then
	if [ "$oshelp" = "Linux" ] ; then
		release=`cat /etc/redhat-release | cut -d ' ' -f 4`
	else
		release=`cat /etc/redhat-release | cut -d ' ' -f 3`
	fi
	ostype="CentOS"
else
	release=`cat /etc/redhat-release | cut -d ' ' -f 7`
        ostype="Redhat"
fi
release=${release:0:1}
echo "* $ostype release is $release" >/dev/tty1
echo "$ostype release is $release"
hostname
hostname >/dev/tty1


curpos=`expr $curpos + 1`
tput cup $curpos 0 >/dev/tty1
echo "* using logger $LOGGER" >/dev/tty1

if [ "$release" = "8" ] ; then
	/usr/bin/update-crypto-policies --set DEFAULT
fi

<%- if $add_hosts_entries { -%>
echo "${PEMASTERIP}    ${PEMASTER}" >> /etc/hosts
echo "${INSTALLSERVERIP}"    ${INSTALLSERVER}" >> /etc/hosts"
<%- } -%>

<%- if $install_resolv_conf { -%>
#------------------------------------------------------------------------#
# install resolv.conf file
#------------------------------------------------------------------------#

echo "+----------------------------------------------------+"
echo "+ installing resolv.conf file                        +"
echo "+----------------------------------------------------+"
curpos=`expr $curpos + 1`
tput cup $curpos 0 >/dev/tty1
echo -n "* installing initial resolv.conf file ... " >/dev/tty1
echo "installing initial resolv.conf file" >/dev/tty3
cwd=`pwd`
ret=0
cd /var/tmp
if [ "$?" = "0" ] ; then
	getFile http://${INSTALLSERVER}/pub/resolv.conf resolv.conf
	if [ "$?" = "0" ] ; then
		/bin/mv /var/tmp/resolv.conf /etc/resolv.conf
		if [ "$?" = "0" ] ; then
			/bin/chmod 644 /etc/resolv.conf
			/bin/chown root:root /etc/resolv.conf
		else
			echo "can't move /var/tmp/resolv.conf to /etc/resolv.conf"
			ret=1
		fi
	else
		echo "can't fetch resolv.conf from install server"
		ret=1
	fi
else
	echo "can't change to /var/tmp/"
	ret=1
fi

cd $cwd

if [ "$ret" != "0" ] ; then
	log "error installing resolv.conf file"
else
	log "installed resolv.conf file successfully"
fi

printReturn $ret $curpos
<%- } -%>

<%- if $configure_repos { -%>}
#------------------------------------------------------------------------#
# install repositories and RPM keys
#------------------------------------------------------------------------#

echo "+----------------------------------------------------+"
echo "+ installing repositories and RPM keys               +"
echo "+----------------------------------------------------+"
curpos=`expr $curpos + 1`
tput cup $curpos 0 >/dev/tty1
echo -n "* installing repositories and RPM keys ... " >/dev/tty1
echo "installing repositories and RPM keys" >/dev/tty3

cwd=`pwd`
ret=0
cd /var/tmp
if [ "$?" = "0" ] ; then
	getFile http://$INSTALLSERVER/pub/install.txt install.txt
	if [ "$?" = "0" ] ; then

		cat install.txt | grep -v ^# | grep -v ^$ | sed -e "s/#REL#/${release}/g" | while read instfile ; do

			getFile "http://$INSTALLSERVER/pub/$instfile" $instfile
			if [ "$?" != "0" ] ; then
							echo "download of $instfile failed"
							ret=1
			fi

		done

		mv *.repo /etc/yum.repos.d/
		mv RPM-GPG-KEY-* /etc/pki/rpm-gpg/
		cd /etc/pki/rpm-gpg
		for key in `ls RPM-GPG-KEY-*` ; do
						rpm --import $key
		done

	else
		echo "can't fetch install.txt from install server"
		ret=1
	fi

else
	echo "can't change to /var/tmp"
	ret=1
fi
cd $cwd
if [ "$ret" != "0" ] ; then
        log "error installing repositories and RPM keys"
else
        log "repositories and RPM keys installed successfully"
fi

printReturn $ret $curpos
<%- } -%>

#------------------------------------------------------------------------#
# clean up rpm db files
#------------------------------------------------------------------------#

cleanupRpmDbFiles

#------------------------------------------------------------------------#
# update all installed packages to their latest version
#------------------------------------------------------------------------#

echo "+----------------------------------------------------+"
echo "+ updating to actual distri level with yum           +"
echo "+----------------------------------------------------+"
curpos=`expr $curpos + 1`
tput cup $curpos 0 >/dev/tty1
echo -n "* getting and installing all updates ... " >/dev/tty1
echo "getting and installing all updates" >/dev/tty3

ret=0
/usr/bin/yum check-update 
/usr/bin/yum -y update yum
if [ "$?" = "0" ] ; then
	/usr/bin/yum -y update
	if [ "$?" != "0" ] ; then
		echo "yum -y update failed"
		ret=1
	fi
else
	echo "yum -y update yum failed"
	ret=1
fi

if [ "$ret" != "0" ] ; then
	log "error installing updates"
else
	log "updates installed successfully"
fi

printReturn $ret $curpos

#------------------------------------------------------------------------#
# clean up
#------------------------------------------------------------------------#

echo "+---------------------------------------------------+"
echo "+ cleaning up                                       +"
echo "+---------------------------------------------------+"

cleanupRpmDbFiles

#------------------------------------------------------------------------#
# system hardening
#------------------------------------------------------------------------#

echo "+----------------------------------------------------+"
echo "+ enabling sysrq                                     +"
echo "+----------------------------------------------------+"
curpos=`expr $curpos + 1`
tput cup $curpos 0 >/dev/tty1
echo -n "* enabling sysrq ... " >/dev/tty1
echo "enabling sysrq" >/dev/tty3

ret=0
sed -i 's/kernel.sysrq = 0/kernel.sysrq = 1/' /etc/sysctl.conf
if [ "$?" != "0" ] ; then
	echo "can't set sysrq=1"
	ret=1
fi

printReturn $ret $curpos

#------------------------------------------------------------------------#
# install puppet
#------------------------------------------------------------------------#

if [ "$install_puppet" = "y" ] ; then
	echo "+----------------------------------------------------+"
	echo "+ installing puppet                                  +"
	echo "+----------------------------------------------------+"
	curpos=`expr $curpos + 1`
	tput cup $curpos 0 >/dev/tty1
	echo -n "* installing puppet ... " >/dev/tty1
	echo "installing puppet" >/dev/tty3

	/usr/bin/yum -y install curl net-tools
	ret=$?
	if [ "$ret" = "0" ] ; then
		if [ -f /tmp/puppetrole ] ; then
			puppetrole=`cat /tmp/puppetrole`
		else
			puppetrole="default"
		fi

		if [ -f /tmp/puppetenv ] ; then
			puppetenv=`cat /tmp/puppetenv`
		else
			puppetenv="production"
		fi
		
		if [ -f /tmp/datacenter ] ; then
			datacenter=`cat /tmp/datacenter`
		else
			datacenter="none"
		fi

		if [ ! -d /etc/puppetlabs/puppet ]; then
			echo "creating directory /etc/puppetlabs/puppet"
			mkdir -p /etc/puppetlabs/puppet
		fi

		cat > /etc/puppetlabs/puppet/csr_attributes.yaml << YAML
custom_attributes:
    1.2.840.113549.1.9.7: <%= unwrap($challenge_password) %>
extension_requests:
    pp_image_name: CentOS-${release}
    pp_hostname: `hostname`
    pp_datacenter: $datacenter
    pp_role: $puppetrole
    pp_environment: $puppetenv
YAML
		curl -k https://${PEMASTER}:8140/packages/current/install.bash | sudo bash
		# puppet config set environment $puppetenv --section agent
	else
		log "installation of curl rpm failed"
		echo "installation of curl rpm failed"
	fi
		
	printReturn $ret $curpos
fi

#------------------------------------------------------------------------#
# here we are, end of a hard work ;-)
#------------------------------------------------------------------------#

if [ $release -lt 8 ] ; then		
	/usr/bin/yum clean all
else
	/usr/bin/dnf clean all && rm -rf /var/cache/dnf  && /usr/bin/dnf upgrade -y && /usr/bin/dnf update -y
	/usr/bin/yum clean all
fi

curpos=`expr $curpos + 1`
tput cup $curpos 0 >/dev/tty1
echo "* finished postinstall bootstrap script" >/dev/tty1

exit 0

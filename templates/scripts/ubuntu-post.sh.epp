#!/bin/bash

# set -x -v

#------------------------------------------------------------------------#
#                                                                        #
# Script:    ubuntu-post.sh                                              #
# Date:      30.12.2020                                                  #
# Version:   0.1                                                         #
# Author:    Thomas Krieger <tom@tom-krieger.de>                         #
#                                                                        #
# History:                                                               #
# --------                                                               #
#                                                                        #
# -----------+-------------------+-------------------------------------- #
# Date       ! Who               ! Reason                                #
# -----------+-------------------+-------------------------------------- #
# 30.12.2020 ! Thomas Krieger    ! initial version                       #
# -----------+-------------------+-------------------------------------- #
#                                                                        #
#------------------------------------------------------------------------#

PEMASTER="<%= $puppetmaster %>"
PEMASTERIP="<%= $puppetmasterip %>"
INSTALLSERVERIP="<%= $installserverip %>"
INSTALLSERVER="<%= $installserver %>"
LOGGER="undef"
INSTALLPUPPET=${1:-y}
AUTOINSTALL=${2:-n}
PUPPETENV=${3:-production}
PUPPETROLE=${4:-default}
DATACENTER=${5:-none}

echo "running ubuntu postinstall with puppet = ${INSTALLPUPPET} and autoinstall = ${AUTOINSTALL}"

if [ -x "/usr/bin/logger" ] ; then
	LOGGER="/usr/bin/logger"
elif [ -x "/bin/logger" ] ; then
	LOGGER="/bin/logger"
fi

#------------------------------------------------------------------------#
# send a log message to syslog
#------------------------------------------------------------------------#

function log () {

	if [ ! -z "$1" ]
	then

		if [ "$LOGGER" != "undef" ]
		then
			$LOGGER -p daemon.info -t postinstall "$1"
		fi

	fi
}

#------------------------------------------------------------------------#
# print out a success or failure message at column 65
#------------------------------------------------------------------------#

function printReturn () {
	ret=$1
	pos=$2
	tput cup $pos 65 >/dev/tty5
	if [ "$ret" = "0" ]
	then
		echo "[ success ]" >/dev/tty5
	else
		echo "[ failure ]" >/dev/tty5
	fi
}

#------------------------------------------------------------------------#
# update all installed packages to their latest version
#------------------------------------------------------------------------#

function installUpdates () {

	log "getting and installing all updates"

	ret=0
	/usr/bin/apt-get -y update
	if [ "$?" != "0" ]
	then
		echo "apt-get update failed"
		ret=1
	else
		/usr/bin/apt-get -y upgrade
		if [ "$?" != "0" ] ; then
			echo "apt-get upgrade failed"
			ret=1
		fi
	fi

	if [ "$ret" != "0" ]
	then
		log "error installing updates"
	else
		log "updates installed successfully"
	fi

}

#------------------------------------------------------------------------#
# install puppet
#------------------------------------------------------------------------#

function installPuppet () {
	log "installing puppet"

	if [ -f /tmp/puppetrole ]
	then
		PUPPETROLE=`cat /tmp/puppetrole`
	fi

	if [ -f /tmp/puppetenv ]
	then
		PUPPETENV=`cat /tmp/puppetenv`
	fi

	if [ -f /tmp/datacenter ]
	then
		DATACENTER=`cat /tmp/datacenter`
	fi

	if [ ! -d /etc/puppetlabs/puppet ]
	then
		echo "creating directory /etc/puppetlabs/puppet"
		mkdir -p /etc/puppetlabs/puppet
	fi

	log "puppet environment ${PUPPETENV}, role ${PUPPETROLE}"

	curl -o /usr/local/share/ca-certificates/pe-master.crt https://repos.home.tom-krieger.de/pub/pe-master-puppet.crt
	update-ca-certificates
	apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4528B6CD9E61EF26

	cat > /etc/puppetlabs/puppet/csr_attributes.yaml << YAML
custom_attributes:
    1.2.840.113549.1.9.7: <%= unwrap($challenge_password) %>
extension_requests:
    pp_image_name:  Ubuntu-${release}
    pp_hostname: `hostname`
    pp_datacenter: ${DATACENTER}
    pp_role: ${PUPPETROLE}
    pp_auth_role: ${PUPPETROLE}
    pp_environment: ${PUPPETENV}
YAML

	curl -k https://${PEMASTER}:8140/packages/current/install.bash | sudo bash
	/usr/local/bin/puppet config set environment ${PUPPETENV} --section agent

	sleep 2

	systemctl enable puppet

	while [ -f "/opt/puppetlabs/puppet/cache/state/agent_catalog_run.lock" ]
	do
			echo "puppet run currently on the way ..."
			log "puppet run currently on the way ..."
			sleep 20
	done

	/usr/local/bin/puppet agent -t
}

#------------------------------------------------------------------------#
# print a starting message
#------------------------------------------------------------------------#

log "* starting postinstall bootstrap script"
log "* running ubuntu postinstall with puppet = ${INSTALLPUPPET} and autoinstall = ${AUTOINSTALL}"

osname=`cat /etc/os-release | grep ^NAME= | cut -f 2 -d = | sed -e 's/"//g'`
release=`cat /etc/os-release | grep VERSION_ID | cut -f 2 -d = | sed -e 's/"//g'`
ostype="Ubuntu"
release=${release:0:2}

echo "$ostype release is $release"
log "$ostype release is $release"
hostname

<%- if $add_hosts_entries { -%>
echo "${PEMASTERIP}    ${PEMASTER}" >> /etc/hosts
echo "${INSTALLSERVERIP}"    ${INSTALLSERVER}" >> /etc/hosts"
<%- } -%>

if [ "${AUTOINSTALL}" = "n" ]
then
	installUpdates
else
	log "* skipping update installation" 
fi

if [ "${INSTALLPUPPET}" = "y" ]
then
	installPuppet
fi

if [ "${AUTOINSTALL}" = "y" ]
then
	sed -i '/ubuntu-post/d' /etc/rc.local

	log "* finished postinstall bootstrap script, rebooting ..."
	reboot
else
	log "* finished postinstall bootstrap script"
fi

exit 0
